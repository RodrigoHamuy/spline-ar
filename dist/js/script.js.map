{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/controls/OrbitControls.js","js/game/CameraManager.js","js/game/Game.js","js/game/NavTrackAgent.js","js/game/Player.js","js/game/PlayerCamera.js","js/game/SceneManager.js","js/game/TrackGeometry.js","js/game/TrackManager.js","js/game/WindowManager.js","js/script.js","vendor/EventDispatcher.js"],"names":[],"mappingszlNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"script.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n*/\r\n\r\n// This set of controls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n\r\nfunction OrbitControls( object, domElement ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n\t// Set to false to disable this control\r\n\tthis.enabled = true;\r\n\r\n\t// \"target\" sets the location of focus, where the object orbits around\r\n\tthis.target = new THREE.Vector3();\r\n\r\n\t// How far you can dolly in and out ( PerspectiveCamera only )\r\n\tthis.minDistance = 0;\r\n\tthis.maxDistance = Infinity;\r\n\r\n\t// How far you can zoom in and out ( OrthographicCamera only )\r\n\tthis.minZoom = 0;\r\n\tthis.maxZoom = Infinity;\r\n\r\n\t// How far you can orbit vertically, upper and lower limits.\r\n\t// Range is 0 to Math.PI radians.\r\n\tthis.minPolarAngle = 0; // radians\r\n\tthis.maxPolarAngle = Math.PI; // radians\r\n\r\n\t// How far you can orbit horizontally, upper and lower limits.\r\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\r\n\tthis.minAzimuthAngle = - Infinity; // radians\r\n\tthis.maxAzimuthAngle = Infinity; // radians\r\n\r\n\t// Set to true to enable damping (inertia)\r\n\t// If damping is enabled, you must call controls.update() in your animation loop\r\n\tthis.enableDamping = false;\r\n\tthis.dampingFactor = 0.25;\r\n\r\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n\t// Set to false to disable zooming\r\n\tthis.enableZoom = true;\r\n\tthis.zoomSpeed = 1.0;\r\n\r\n\t// Set to false to disable rotating\r\n\tthis.enableRotate = true;\r\n\tthis.rotateSpeed = 1.0;\r\n\r\n\t// Set to false to disable panning\r\n\tthis.enablePan = true;\r\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\r\n\r\n\t// Set to true to automatically rotate around the target\r\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n\tthis.autoRotate = false;\r\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n\t// Set to false to disable use of the keys\r\n\tthis.enableKeys = true;\r\n\r\n\t// The four arrow keys\r\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\r\n\r\n\t// Mouse buttons\r\n\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\r\n\r\n\t// for reset\r\n\tthis.target0 = this.target.clone();\r\n\tthis.position0 = this.object.position.clone();\r\n\tthis.zoom0 = this.object.zoom;\r\n\r\n\t//\r\n\t// public methods\r\n\t//\r\n\r\n\tthis.getPolarAngle = function () {\r\n\r\n\t\treturn spherical.phi;\r\n\r\n\t};\r\n\r\n\tthis.getAzimuthalAngle = function () {\r\n\r\n\t\treturn spherical.theta;\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tscope.target.copy( scope.target0 );\r\n\t\tscope.object.position.copy( scope.position0 );\r\n\t\tscope.object.zoom = scope.zoom0;\r\n\r\n\t\tscope.object.updateProjectionMatrix();\r\n\t\tscope.dispatchEvent( changeEvent );\r\n\r\n\t\tscope.update();\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t};\r\n\r\n\t// this method is exposed, but perhaps it would be better if we can make it private...\r\n\tthis.update = function() {\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\t// so camera.up is the orbit axis\r\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\r\n\t\tvar quatInverse = quat.clone().inverse();\r\n\r\n\t\tvar lastPosition = new THREE.Vector3();\r\n\t\tvar lastQuaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function update () {\r\n\r\n\t\t\tvar position = scope.object.position;\r\n\r\n\t\t\toffset.copy( position ).sub( scope.target );\r\n\r\n\t\t\t// rotate offset to \"y-axis-is-up\" space\r\n\t\t\toffset.applyQuaternion( quat );\r\n\r\n\t\t\t// angle from z-axis around y-axis\r\n\t\t\tspherical.setFromVector3( offset );\r\n\r\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n\t\t\t\trotateLeft( getAutoRotationAngle() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tspherical.theta += sphericalDelta.theta;\r\n\t\t\tspherical.phi += sphericalDelta.phi;\r\n\r\n\t\t\t// restrict theta to be between desired limits\r\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\r\n\r\n\t\t\t// restrict phi to be between desired limits\r\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n\t\t\tspherical.makeSafe();\r\n\r\n\r\n\t\t\tspherical.radius *= scale;\r\n\r\n\t\t\t// restrict radius to be between desired limits\r\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\r\n\r\n\t\t\t// move target to panned location\r\n\t\t\tscope.target.add( panOffset );\r\n\r\n\t\t\toffset.setFromSpherical( spherical );\r\n\r\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\r\n\t\t\toffset.applyQuaternion( quatInverse );\r\n\r\n\t\t\tposition.copy( scope.target ).add( offset );\r\n\r\n\t\t\tscope.object.lookAt( scope.target );\r\n\r\n\t\t\tif ( scope.enableDamping === true ) {\r\n\r\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscale = 1;\r\n\t\t\tpanOffset.set( 0, 0, 0 );\r\n\r\n\t\t\t// update condition is:\r\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\r\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n\t\t\tif ( zoomChanged ||\r\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\r\n\r\n\t\t\t\tscope.dispatchEvent( changeEvent );\r\n\r\n\t\t\t\tlastPosition.copy( scope.object.position );\r\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\r\n\t\t\t\tzoomChanged = false;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\r\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\r\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\r\n\r\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\r\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\r\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\r\n\r\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\r\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\r\n\r\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\r\n\r\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\r\n\r\n\t};\r\n\r\n\t//\r\n\t// internals\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tvar changeEvent = { type: 'change' };\r\n\tvar startEvent = { type: 'start' };\r\n\tvar endEvent = { type: 'end' };\r\n\r\n\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\r\n\r\n\tvar state = STATE.NONE;\r\n\r\n\tvar EPS = 0.000001;\r\n\r\n\t// current position in spherical coordinates\r\n\tvar spherical = new THREE.Spherical();\r\n\tvar sphericalDelta = new THREE.Spherical();\r\n\r\n\tvar scale = 1;\r\n\tvar panOffset = new THREE.Vector3();\r\n\tvar zoomChanged = false;\r\n\r\n\tvar rotateStart = new THREE.Vector2();\r\n\tvar rotateEnd = new THREE.Vector2();\r\n\tvar rotateDelta = new THREE.Vector2();\r\n\r\n\tvar panStart = new THREE.Vector2();\r\n\tvar panEnd = new THREE.Vector2();\r\n\tvar panDelta = new THREE.Vector2();\r\n\r\n\tvar dollyStart = new THREE.Vector2();\r\n\tvar dollyEnd = new THREE.Vector2();\r\n\tvar dollyDelta = new THREE.Vector2();\r\n\r\n\tfunction getAutoRotationAngle() {\r\n\r\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n\t}\r\n\r\n\tfunction getZoomScale() {\r\n\r\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n\t}\r\n\r\n\tfunction rotateLeft( angle ) {\r\n\r\n\t\tsphericalDelta.theta -= angle;\r\n\r\n\t}\r\n\r\n\tfunction rotateUp( angle ) {\r\n\r\n\t\tsphericalDelta.phi -= angle;\r\n\r\n\t}\r\n\r\n\tvar panLeft = function() {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function panLeft( distance, objectMatrix ) {\r\n\r\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n\t\t\tv.multiplyScalar( - distance );\r\n\r\n\t\t\tpanOffset.add( v );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tvar panUp = function() {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function panUp( distance, objectMatrix ) {\r\n\r\n\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\r\n\t\t\tv.multiplyScalar( distance );\r\n\r\n\t\t\tpanOffset.add( v );\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\t// deltaX and deltaY are in pixels; right and down are positive\r\n\tvar pan = function() {\r\n\r\n\t\tvar offset = new THREE.Vector3();\r\n\r\n\t\treturn function pan ( deltaX, deltaY ) {\r\n\r\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\t// perspective\r\n\t\t\t\tvar position = scope.object.position;\r\n\t\t\t\toffset.copy( position ).sub( scope.target );\r\n\t\t\t\tvar targetDistance = offset.length();\r\n\r\n\t\t\t\t// half of the fov is center to top of screen\r\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\r\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\t// orthographic\r\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// camera neither orthographic nor perspective\r\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n\t\t\t\tscope.enablePan = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}();\r\n\r\n\tfunction dollyIn( dollyScale ) {\r\n\r\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\tscale /= dollyScale;\r\n\r\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\r\n\t\t\tscope.object.updateProjectionMatrix();\r\n\t\t\tzoomChanged = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tscope.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction dollyOut( dollyScale ) {\r\n\r\n\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\tscale *= dollyScale;\r\n\r\n\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\r\n\t\t\tscope.object.updateProjectionMatrix();\r\n\t\t\tzoomChanged = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n\t\t\tscope.enableZoom = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\t// event callbacks - update the object state\r\n\t//\r\n\r\n\tfunction handleMouseDownRotate( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownRotate' );\r\n\r\n\t\trotateStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseDownDolly( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownDolly' );\r\n\r\n\t\tdollyStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseDownPan( event ) {\r\n\r\n\t\t//console.log( 'handleMouseDownPan' );\r\n\r\n\t\tpanStart.set( event.clientX, event.clientY );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMoveRotate( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMoveRotate' );\r\n\r\n\t\trotateEnd.set( event.clientX, event.clientY );\r\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t// rotating across whole screen goes 360 degrees around\r\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\r\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMoveDolly( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMoveDolly' );\r\n\r\n\t\tdollyEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t} else if ( dollyDelta.y < 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseMovePan( event ) {\r\n\r\n\t\t//console.log( 'handleMouseMovePan' );\r\n\r\n\t\tpanEnd.set( event.clientX, event.clientY );\r\n\r\n\t\tpanDelta.subVectors( panEnd, panStart );\r\n\r\n\t\tpan( panDelta.x, panDelta.y );\r\n\r\n\t\tpanStart.copy( panEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleMouseUp( event ) {\r\n\r\n\t\t//console.log( 'handleMouseUp' );\r\n\r\n\t}\r\n\r\n\tfunction handleMouseWheel( event ) {\r\n\r\n\t\t//console.log( 'handleMouseWheel' );\r\n\r\n\t\tif ( event.deltaY < 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t} else if ( event.deltaY > 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleKeyDown( event ) {\r\n\r\n\t\t//console.log( 'handleKeyDown' );\r\n\r\n\t\tswitch ( event.keyCode ) {\r\n\r\n\t\t\tcase scope.keys.UP:\r\n\t\t\t\tpan( 0, scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.BOTTOM:\r\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.LEFT:\r\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.RIGHT:\r\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartRotate( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartRotate' );\r\n\r\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartDolly( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartDolly' );\r\n\r\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n\r\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tdollyStart.set( 0, distance );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchStartPan( event ) {\r\n\r\n\t\t//console.log( 'handleTouchStartPan' );\r\n\r\n\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMoveRotate( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMoveRotate' );\r\n\r\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\t// rotating across whole screen goes 360 degrees around\r\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\r\n\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMoveDolly( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMoveDolly' );\r\n\r\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n\r\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\tdollyEnd.set( 0, distance );\r\n\r\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\tdollyOut( getZoomScale() );\r\n\r\n\t\t} else if ( dollyDelta.y < 0 ) {\r\n\r\n\t\t\tdollyIn( getZoomScale() );\r\n\r\n\t\t}\r\n\r\n\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchMovePan( event ) {\r\n\r\n\t\t//console.log( 'handleTouchMovePan' );\r\n\r\n\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\r\n\t\tpanDelta.subVectors( panEnd, panStart );\r\n\r\n\t\tpan( panDelta.x, panDelta.y );\r\n\r\n\t\tpanStart.copy( panEnd );\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction handleTouchEnd( event ) {\r\n\r\n\t\t//console.log( 'handleTouchEnd' );\r\n\r\n\t}\r\n\r\n\t//\r\n\t// event handlers - FSM: listen for events and reset state\r\n\t//\r\n\r\n\tfunction onMouseDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\r\n\r\n\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\thandleMouseDownRotate( event );\r\n\r\n\t\t\tstate = STATE.ROTATE;\r\n\r\n\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\r\n\r\n\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\thandleMouseDownDolly( event );\r\n\r\n\t\t\tstate = STATE.DOLLY;\r\n\r\n\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\r\n\r\n\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\thandleMouseDownPan( event );\r\n\r\n\t\t\tstate = STATE.PAN;\r\n\r\n\t\t}\r\n\r\n\t\tif ( state !== STATE.NONE ) {\r\n\r\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\r\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\r\n\r\n\t\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onMouseMove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif ( state === STATE.ROTATE ) {\r\n\r\n\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\thandleMouseMoveRotate( event );\r\n\r\n\t\t} else if ( state === STATE.DOLLY ) {\r\n\r\n\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\thandleMouseMoveDolly( event );\r\n\r\n\t\t} else if ( state === STATE.PAN ) {\r\n\r\n\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\thandleMouseMovePan( event );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onMouseUp( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\thandleMouseUp( event );\r\n\r\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\r\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\r\n\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tfunction onMouseWheel( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\r\n\t\thandleMouseWheel( event );\r\n\r\n\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t}\r\n\r\n\tfunction onKeyDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\r\n\r\n\t\thandleKeyDown( event );\r\n\r\n\t}\r\n\r\n\tfunction onTouchStart( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1:\t// one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.enableRotate === false ) return;\r\n\r\n\t\t\t\thandleTouchStartRotate( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\t// two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.enableZoom === false ) return;\r\n\r\n\t\t\t\thandleTouchStartDolly( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.enablePan === false ) return;\r\n\r\n\t\t\t\thandleTouchStartPan( event );\r\n\r\n\t\t\t\tstate = STATE.TOUCH_PAN;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t\tif ( state !== STATE.NONE ) {\r\n\r\n\t\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onTouchMove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1: // one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.enableRotate === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMoveRotate( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2: // two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.enableZoom === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMoveDolly( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.enablePan === false ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\r\n\r\n\t\t\t\thandleTouchMovePan( event );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction onTouchEnd( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\thandleTouchEnd( event );\r\n\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tfunction onContextMenu( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\r\n\r\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\r\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\r\n\r\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\r\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\r\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\r\n\r\n\twindow.addEventListener( 'keydown', onKeyDown, false );\r\n\r\n\t// force an update at start\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\r\nOrbitControls.prototype.constructor = OrbitControls;\r\n\r\nObject.defineProperties( OrbitControls.prototype, {\r\n\r\n\tcenter: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\r\n\t\t\treturn this.target;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// backward compatibility\r\n\r\n\tnoZoom: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\r\n\t\t\treturn ! this.enableZoom;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\r\n\t\t\tthis.enableZoom = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoRotate: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\r\n\t\t\treturn ! this.enableRotate;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\r\n\t\t\tthis.enableRotate = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoPan: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\r\n\t\t\treturn ! this.enablePan;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\r\n\t\t\tthis.enablePan = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tnoKeys: {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\r\n\t\t\treturn ! this.enableKeys;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\r\n\t\t\tthis.enableKeys = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tstaticMoving : {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\r\n\t\t\treturn ! this.enableDamping;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\r\n\t\t\tthis.enableDamping = ! value;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdynamicDampingFactor : {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\r\n\t\t\treturn this.dampingFactor;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\r\n\t\t\tthis.dampingFactor = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nmodule.exports = OrbitControls;\r\n","let\r\nOrbitControls = require( '../controls/OrbitControls' );\r\n\r\nclass CameraManager {\r\n\r\n  constructor() {\r\n\r\n    let\r\n    viewAngle = 45,\r\n    aspectRatio = window.innerWidth / window.innerHeight,\r\n    near = 1,\r\n    far = 10000;\r\n\r\n    this.camera = new THREE.PerspectiveCamera(\r\n      viewAngle, aspectRatio, near, far\r\n    );\r\n    this.camera.position.z = 300;\r\n\r\n    let controls = new OrbitControls( this.camera );\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = CameraManager;\r\n","let\r\nWindowManager = require( './WindowManager.js' ),\r\nPlayer = require( './Player.js' ),\r\nSceneManager = require( './SceneManager.js' ),\r\nCameraManager = require( './CameraManager' ),\r\nTrackManager = require( './TrackManager' ),\r\nNavTrackAgent = require( './NavTrackAgent' ),\r\nPlayerCamera = require( './PlayerCamera' );\r\n\r\nclass Game {\r\n\r\n  constructor() {\r\n\r\n    this.cubes = [];\r\n\r\n    THREE.ARUtils.getARDisplay().then(this.init.bind(this));\r\n\r\n    this.trackManager = new TrackManager();\r\n    this.trackManager.addEventListener('newSpline', this.newCubeGroup.bind(this));\r\n    // this.windowManager = new WindowManager();\r\n    // this.sceneManager = new SceneManager();\r\n    // let cameraManager = new CameraManager();\r\n    // this.clock = new THREE.Clock();\r\n    //\r\n    // this.windowManager.scene = this.sceneManager.scene;\r\n    // this.windowManager.camera = cameraManager.camera;\r\n    //\r\n    // this.trackManager.requestTrackData()\r\n    // .then( this.onTrackLoad.bind( this ) );\r\n\r\n  }\r\n\r\n  newCubeGroup(){\r\n    this.cubes = [];\r\n  }\r\n\r\n  init(display){\r\n\r\n    if (display === null) {\r\n      THREE.ARUtils.displayUnsupportedMessage();\r\n      return;\r\n    }\r\n    var dom = document.getElementById( 'container' );\r\n    this.vrDisplay = display;\r\n    this.renderer = new THREE.WebGLRenderer({ alpha: true });\r\n    this.scene = new THREE.Scene();\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n    this.renderer.autoClear = false;\r\n    dom.appendChild( this.renderer.domElement );\r\n    window.addEventListener('resize', this.onWindowResize.bind(this), false);\r\n\r\n    this.vrFrameData = new VRFrameData();\r\n\r\n    this.arView = new THREE.ARView(this.vrDisplay, this.renderer);\r\n    this.camera = new THREE.ARPerspectiveCamera(\r\n      this.vrDisplay,\r\n      60,\r\n      window.innerWidth / window.innerHeight,\r\n      this.vrDisplay.depthNear,\r\n      this.vrDisplay.depthFar\r\n    );\r\n    this.vrControls = new THREE.VRControls(this.camera);\r\n\r\n    this.createBoxTemplate();\r\n\r\n    this.renderer.domElement.addEventListener('touchstart', this.onClick.bind(this), false);\r\n\r\n    this.update();\r\n  }\r\n\r\n  createBoxTemplate(){\r\n\r\n    var colors = [\r\n      new THREE.Color( 0xffffff ),\r\n      new THREE.Color( 0xffff00 ),\r\n      new THREE.Color( 0xff00ff ),\r\n      new THREE.Color( 0xff0000 ),\r\n      new THREE.Color( 0x00ffff ),\r\n      new THREE.Color( 0x00ff00 ),\r\n      new THREE.Color( 0x0000ff ),\r\n      new THREE.Color( 0x000000 )\r\n    ];\r\n\r\n    var geometry = new THREE.BoxGeometry( 0.025, 0.05, 0.025 );\r\n    var faceIndices = ['a', 'b', 'c'];\r\n    for (var i = 0; i < geometry.faces.length; i++) {\r\n      var f  = geometry.faces[i];\r\n      for (var j = 0; j < 3; j++) {\r\n        var vertexIndex = f[faceIndices[ j ]];\r\n        f.vertexColors[j] = colors[vertexIndex];\r\n      }\r\n    }\r\n    var material = new THREE.MeshBasicMaterial({ vertexColors: THREE.VertexColors });\r\n    this.cube = new THREE.Mesh(geometry, material);\r\n\r\n  }\r\n\r\n  onClick(){\r\n    // Fetch the pose data from the current frame\r\n    var pose = this.vrFrameData.pose;\r\n\r\n    // Convert the pose orientation and position into\r\n    // THREE.Quaternion and THREE.Vector3 respectively\r\n    var ori = new THREE.Quaternion(\r\n      pose.orientation[0],\r\n      pose.orientation[1],\r\n      pose.orientation[2],\r\n      pose.orientation[3]\r\n    );\r\n\r\n    var pos = new THREE.Vector3(\r\n      pose.position[0],\r\n      pose.position[1],\r\n      pose.position[2]\r\n    );\r\n\r\n    var dirMtx = new THREE.Matrix4();\r\n    dirMtx.makeRotationFromQuaternion(ori);\r\n\r\n    var push = new THREE.Vector3(0, 0, -1.0);\r\n    push.transformDirection(dirMtx);\r\n    pos.addScaledVector(push, 0.125);\r\n\r\n    // Clone our cube object and place it at the camera's\r\n    // current position\r\n    var clone = this.cube.clone();\r\n\r\n    clone.position.copy(pos);\r\n    clone.quaternion.copy(ori);\r\n    this.cubes.push(clone);\r\n\r\n    if(this.cubes.length < 4){\r\n      this.scene.add(clone);\r\n\r\n    }else if (this.cubes.length === 4){\r\n      for (var i = 0; i < this.cubes.length-1; i++) {\r\n        var cube = this.cubes[i];\r\n        this.scene.remove( this.scene.getObjectById(cube.id));\r\n      }\r\n    }\r\n\r\n    this.updateSpline();\r\n\r\n  }\r\n\r\n  updateSpline(){\r\n    console.log(this.cubes[this.cubes.length-1].position);\r\n    if(this.cubes.length > 3){\r\n\r\n      this.trackManager.updateCtrlPoints( this.cubes );\r\n\r\n      if( this.trackManager.mesh === undefined ){\r\n\r\n        this.trackManager.createPath();\r\n        this.scene.add( this.trackManager.mesh );\r\n\r\n      }else{\r\n\r\n        this.trackManager.updatePath();\r\n\r\n      }\n      // this.trackManager.requestTrackData()\r\n      // .then( ()=>{\r\n      //   this.scene.add( this.trackManager.mesh );\r\n      // } );\r\n    }\r\n  }\r\n\r\n  update(){\r\n    this.arView.render();\r\n    this.camera.updateProjectionMatrix();\r\n    this.vrDisplay.getFrameData(this.vrFrameData);\r\n    this.vrControls.update();\r\n    this.renderer.clearDepth();\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.vrDisplay.requestAnimationFrame(this.update.bind(this));\r\n  }\r\n\r\n  onTrackLoad() {\r\n\r\n    this.navTrackAgent = new NavTrackAgent( this );\r\n    this.player = new Player( this.navTrackAgent );\r\n    this.playerCamera = new PlayerCamera( this );\r\n\r\n    this.player.track = this.trackManager.mesh;\r\n    this.player.updatePosition();\r\n\r\n    this.sceneManager.scene.add( this.trackManager.mesh );\r\n    this.sceneManager.scene.add( this.player.mesh );\r\n\r\n    this.windowManager.render();\r\n\r\n  }\r\n\r\n  getDeltaTime() {\r\n\r\n    return this.clock.getDelta();\r\n\r\n  }\r\n\r\n  onWindowResize(){\r\n    this.camera.aspect = window.innerWidth / window.innerHeight;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = Game;\r\n","let EventDispatcher = require( '../../vendor/EventDispatcher.js' );\r\n\r\nclass NavTrackAgent extends EventDispatcher {\r\n\r\n  constructor( game ) {\r\n\r\n    super();\r\n\r\n    this.game = game;\r\n    this.track = game.trackManager;\r\n    this._currentDistance = 0;\r\n\r\n    this.speed = 150;\r\n\r\n    game.windowManager.addEventListener( 'onPreRender', this.update.bind( this ) );\r\n\r\n  }\r\n\r\n  update() {\r\n\r\n    this.currentDistance = (\r\n      this._currentDistance + this.speed * this.game.getDeltaTime()\r\n    ) % this.track.getLength();\r\n\r\n  }\r\n\r\n  get currentDistance() {\r\n\r\n    return this._currentDistance;\r\n\r\n  }\r\n\r\n  set currentDistance( value ) {\r\n\r\n    this._currentDistance = value;\r\n    this.dispatchEvent( { type: 'change' } );\r\n\r\n  }\r\n\r\n  get amountTraveled() {\r\n\r\n    return this._currentDistance / this.track.getLength();\r\n\r\n  }\r\n\r\n  nextAmountTraveled( add ) {\r\n\r\n    var next = ( this._currentDistance + add ) / this.track.getLength();\r\n\r\n    return next < 1 ? next : 1;\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = NavTrackAgent;\r\n","class Player {\r\n\r\n  constructor ( navTrackAgent ) {\r\n\r\n    this.navTrackAgent = navTrackAgent;\r\n\r\n    var geometry = new THREE.BoxGeometry( 1, 3, 10 );\r\n    var material = new THREE.MeshBasicMaterial( {color: 0x00ff00} );\r\n    this.mesh = new THREE.Mesh( geometry, material );\r\n\r\n    this.mesh.add( new THREE.AxisHelper( 20 ) );\r\n\r\n    this.navTrackAgent.addEventListener(\r\n      'change',\r\n      this.updatePosition.bind( this )\r\n    );\r\n\r\n  }\r\n\r\n  updatePosition() {\r\n\r\n    var amountTraveled = this.navTrackAgent.amountTraveled;\r\n\r\n    var pos = this.track.geometry.getPointAt( amountTraveled );\r\n\r\n    var normal = this.track.geometry.getNormalAt( amountTraveled );\r\n\r\n    var forward = this.track.geometry.getTangent( amountTraveled );\r\n\r\n    this.mesh.position.copy( pos )\r\n    .add(\r\n      new THREE.Vector3()\r\n      .addScaledVector( normal, 10 )\r\n    );\r\n\r\n    this.mesh.up = normal;\r\n\r\n    var m1 = new THREE.Matrix4();\r\n    m1.lookAt( forward, new THREE.Vector3(), normal );\r\n    this.mesh.quaternion.setFromRotationMatrix( m1 );\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = Player;\r\n","class PlayerCamera {\r\n\r\n  constructor( game ) {\r\n\r\n    this.margin = {\r\n      back: -20,\r\n      top: 20\r\n    };\r\n\r\n    this.game = game;\r\n    this.scene = game.sceneManager.scene;\r\n    this.track = game.trackManager.mesh;\r\n    this.navTrackAgent = game.navTrackAgent;\r\n\r\n    var geometry = new THREE.BoxGeometry( 1, 3, 10 );\r\n    var material = new THREE.MeshBasicMaterial( {color: 0x0000ff} );\r\n\r\n    this.helperCameraMesh = new THREE.Mesh( geometry, material );\r\n    this.helperCameraMesh.add( new THREE.AxisHelper( 10 ) );\r\n    this.position = this.helperCameraMesh.position;\r\n\r\n    material = new THREE.MeshBasicMaterial( {color: 0xff0000} );\r\n    geometry = new THREE.BoxGeometry( 3, 3, 3 );\r\n\r\n    this.helperTargetMesh = new THREE.Mesh( geometry, material );\r\n    this.helperTargetMesh.add( new THREE.AxisHelper( 10 ) );\r\n    this.targetPosition = this.helperTargetMesh.position;\r\n\r\n    this.scene.add( this.helperCameraMesh );\r\n    this.scene.add( this.helperTargetMesh );\r\n\r\n    this.navTrackAgent.addEventListener(\r\n      'change',\r\n      this.updatePosition.bind( this )\r\n    );\r\n\r\n  }\r\n\r\n  updatePosition() {\r\n\r\n    var scope = this;\r\n    var amountTraveled = this.navTrackAgent.amountTraveled;\r\n    var pos = this.track.geometry.getPointAt( amountTraveled );\r\n    var normal = this.track.geometry.getNormalAt( amountTraveled );\r\n    var forward = this.track.geometry.getTangent( amountTraveled );\r\n    var next = this.navTrackAgent.nextAmountTraveled( 75 );\r\n    var lookAtPos = this.track.geometry.getPointAt( next );\r\n\r\n    updateCameraPos();\r\n    updateCameraRotation();\r\n\r\n    function updateCameraPos() {\r\n\r\n      var cameraPosition = new THREE.Vector3().copy( pos )\r\n      .addScaledVector( forward, scope.margin.back )\r\n      .addScaledVector( normal, scope.margin.top );\r\n\r\n      scope.position.copy( cameraPosition );\r\n\r\n    }\r\n\r\n    function updateCameraRotation() {\r\n\r\n      scope.helperCameraMesh.lookAt( lookAtPos );\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = PlayerCamera;\r\n","class SceneManager {\r\n\r\n  constructor(){\r\n\r\n    this.createScene();\r\n    // this.addHelpers();\r\n    this.addLights();\r\n\r\n  }\r\n\r\n  createScene() {\r\n\r\n    this.scene = new THREE.Scene();\r\n\r\n  }\r\n\r\n  addHelpers() {\r\n\r\n    this.scene.add( new THREE.AxisHelper( 20 ) );\r\n\r\n  }\r\n\r\n  addLights() {\r\n\r\n    var light = new THREE.SpotLight( 0xffffff, 1.5 );\r\n    light.position.set( 0, 1500, 200 );\r\n    light.castShadow = true;\r\n    light.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 70, 1, 200, 2000 ) );\r\n    light.shadow.bias = -0.000222;\r\n    light.shadow.mapSize.width = 1024;\r\n    light.shadow.mapSize.height = 1024;\r\n\r\n    this.scene.add( light );\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = SceneManager;\r\n","class LinearTranstition {\r\n\r\n  constructor( points ) {\r\n\r\n    this.points = points;\r\n\r\n  }\r\n\r\n  getPointAt ( at ) {\r\n\r\n    let maxIndex = this.points.length - 1;\r\n\r\n    let i = parseInt( at * maxIndex );\r\n\r\n    let i2 = ( i < maxIndex - 1 ) ? i + 1 : i;\r\n\r\n    let rest = ( at * maxIndex ) % 1;\r\n\r\n    let point1 = new THREE.Vector3()\r\n    .copy( this.points[ i ] )\r\n    .multiplyScalar( 1 - rest );\r\n\r\n    let point2 = new THREE.Vector3()\r\n    .copy( this.points[ i2 ] )\r\n    .multiplyScalar( rest );\r\n\r\n    let pointAt = new THREE.Vector3()\r\n    .addVectors( point1, point2 )\r\n    .normalize();\r\n\r\n    return pointAt;\r\n\r\n  }\r\n\r\n}\r\n\r\nclass TrackGeometry extends THREE.BufferGeometry {\r\n\r\n  constructor( ctrlPoints, ctrlNormals, width, segments ) {\r\n\r\n    super();\r\n\r\n    this.type = 'TrackGeometry';\r\n    this.ctrlPoints = ctrlPoints;\r\n    this.ctrlNormals = ctrlNormals;\r\n    this.width = width;\r\n    this.segments = segments;\r\n\r\n    this.getPointAt = getPointAt;\r\n    this.getNormalAt = getNormalAt;\r\n    this.updateControlPoints = updateControlPoints;\r\n    this.generateVertices = generateVertices;\r\n    this.getLength = getLength;\r\n    this.getTangent = getTangent;\r\n\r\n    let\r\n    centerSpline = new THREE.CatmullRomCurve3( ctrlPoints ),\r\n    normalSpline = new LinearTranstition( ctrlNormals ),\r\n    scope = this;\r\n\r\n    normalSpline.tension = 0;\r\n\r\n    generateVertices();\r\n\r\n    function generateVertices() {\r\n\r\n      // buffers\r\n\r\n      let\r\n      indices = [],\r\n      vertices = [],\r\n      normals = [],\r\n      uvs = [];\r\n\r\n      // Generate vertices\r\n\r\n      let\r\n      centerLine = centerSpline.getPoints( scope.segments ),\r\n      leftV = [],\r\n      rightV = [],\r\n      normals2 = [];\r\n\r\n      for ( let i = 0; i < scope.segments + 1; i ++ ) {\r\n\r\n        let forward = centerSpline.getTangent( i / scope.segments );\r\n        let up = normalSpline.getPointAt( i / scope.segments );\r\n\r\n        let right = new THREE.Vector3()\r\n        .crossVectors( forward, up )\r\n        .normalize()\r\n        .multiplyScalar( scope.width * 0.5 );\r\n\r\n        let rightPoint = new THREE.Vector3()\r\n        .addVectors( centerLine[ i ], right );\r\n\r\n        let leftPoint = new THREE.Vector3()\r\n        .subVectors( centerLine[ i ], right );\r\n\r\n        leftV.push( leftPoint.toArray() );\r\n\r\n        rightV.push( rightPoint.toArray() );\r\n\r\n        let normal = new THREE.Vector3().crossVectors( right, forward ).normalize();\r\n\r\n        normals.push( normal.toArray() );\r\n\r\n      }\r\n\r\n      let totalDistance = 0;\r\n\r\n\r\n      for ( let i = 0; i < scope.segments; i ++ ) {\r\n\r\n        vertices.push( ...leftV[ i ], ...rightV[ i ], ...leftV[ i + 1 ] );\r\n        vertices.push( ...leftV[ i + 1 ], ...rightV[ i ], ...rightV[ i + 1 ] );\r\n\r\n        normals2.push( ...normals[ i ], ...normals[ i ], ...normals[ i + 1 ] );\r\n        normals2.push( ...normals[ i + 1 ], ...normals[ i ], ...normals[ i + 1 ] );\r\n\r\n        let distance = centerLine[ i ].distanceTo( centerLine[ i + 1 ] ) / scope.width;\r\n        totalDistance += distance;\r\n        uvs.push(\r\n          0, 0,\r\n          1, 0,\r\n          0, totalDistance\r\n        );\r\n        uvs.push(\r\n          0, totalDistance,\r\n          1, 0,\r\n          1, totalDistance\r\n        );\r\n\r\n      }\r\n\r\n      scope.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\r\n\r\n      scope.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals2, 3 ) );\r\n\r\n      scope.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );\r\n\r\n    }\r\n\r\n    function getNormalAt( t ) {\r\n\r\n      return normalSpline.getPointAt( t );\r\n\r\n    }\r\n\r\n    function getPointAt( t ) {\r\n\r\n      return centerSpline.getPointAt( t );\r\n\r\n    }\r\n\r\n    function getLength() {\r\n\r\n      return centerSpline.getLength();\r\n\r\n    }\r\n\r\n    function getTangent( t ) {\r\n\r\n      return centerSpline.getTangent( t );\r\n\r\n    }\r\n\r\n    function updateControlPoints( ctrlPoints, normalPoints ) {\r\n\r\n      centerSpline = new THREE.CatmullRomCurve3( ctrlPoints );\r\n      if ( typeof normalPoints != 'undefined' ) {\r\n\r\n        normalSpline = new LinearTranstition( normalPoints );\r\n        normalSpline.tension = 0;\r\n\r\n      }\r\n      generateVertices();\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = TrackGeometry;\r\n","const TrackGeometry = require( './TrackGeometry.js' );\r\n\r\nclass TrackManager extends THREE.EventDispatcher {\r\n\r\n  constructor(){\r\n    super();\r\n    this._width = 0.01;\r\n    this.segments = 300;\r\n    this.editor = true;\r\n  }\r\n\r\n  get width(){\r\n    return this._width;\r\n  }\r\n\r\n  set width(value){\r\n    this._width = value;\r\n    this.updatePath();\r\n  }\r\n\r\n  requestTrackData() { return new Promise( ( resolve ) => {\r\n\r\n    $.getJSON( 'data/level01.json')\r\n    .done( (data ) =>{\r\n\r\n      this.onTrackDataResponse( data );\r\n      resolve();\r\n\r\n    } );\r\n\r\n  } ); }\r\n\r\n  onTrackDataResponse( data ) {\r\n\r\n    this.ctrlPoints = [];\r\n    this.ctrlNormals = [];\r\n\r\n    let i = 0;\r\n\r\n    for ( i = 0; i < data.ctrlPoints.length; i++ ) {\r\n\r\n      let pointArray = data.ctrlPoints[i];\r\n      let pointVector = new THREE.Vector3().fromArray( pointArray );\r\n      this.ctrlPoints.push( pointVector );\r\n\r\n    }\r\n\r\n    for ( i = 0; i < data.ctrlNormals.length; i++ ) {\r\n\r\n      let pointArray = data.ctrlNormals[i];\r\n      let pointVector = new THREE.Vector3().fromArray( pointArray );\r\n      this.ctrlNormals.push( pointVector );\r\n\r\n    }\r\n\r\n    this.createPath();\r\n\r\n  }\r\n\r\n  createPath() {\r\n\r\n    var pathGeometry = new TrackGeometry(\r\n      this.ctrlPoints,\r\n      this.ctrlNormals,\r\n      this._width,\r\n      this.segments\r\n    );\r\n    var material = new THREE.MeshNormalMaterial();\r\n    material.side = THREE.DoubleSide;\r\n    // material.wireframe = true;\r\n    this.mesh = new THREE.Mesh( pathGeometry, material );\r\n\r\n    if( this.editor ){\r\n      this.addEditor();\r\n    }\r\n\r\n  }\r\n\r\n  addEditor(){\r\n    this.gui = new dat.GUI();\r\n    this.gui.add(this, 'width', 0.000001, 0.5);\r\n    this.gui.add(this, 'startNewSpline');\r\n  }\r\n\r\n  startNewSpline(){\r\n    var meshCopy = this.mehs;\r\n    this.mesh = undefined;\r\n    this.gui.destroy();\r\n    this.dispatchEvent( { type: 'newSpline' } );\r\n  }\r\n\r\n  updatePath(){\r\n    this.mesh.geometry.dispose();\r\n\r\n    this.mesh.geometry = new TrackGeometry(\r\n      this.ctrlPoints,\r\n      this.ctrlNormals,\r\n      this._width,\r\n      this.segments\r\n    );\r\n  }\r\n\r\n  updateCtrlPoints(points){\r\n    this.ctrlPoints = [];\r\n    this.ctrlNormals = [];\r\n    for (var i = 0; i < points.length; i++) {\r\n      var point = points[i];\r\n      this.ctrlPoints.push(point.position);\r\n\r\n      var matrix = new THREE.Matrix4();\r\n      matrix.extractRotation( point.matrix );\n      var direction = new THREE.Vector3( 0, 1, 0 ).applyMatrix4(matrix);\r\n      this.ctrlNormals.push(direction);\r\n    }\r\n\r\n  }\r\n\r\n  getLength() {\r\n\r\n    return this.mesh.geometry.getLength();\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = TrackManager;\r\n","let EventDispatcher = require( '../../vendor/EventDispatcher.js' );\r\n\r\nclass WindowManager extends EventDispatcher {\r\n\r\n  constructor() {\r\n\r\n    super();\r\n\r\n    this.createWindow();\r\n\r\n  }\r\n\r\n  createWindow() {\r\n\r\n    var dom = document.getElementById( 'container' );\r\n    this.renderer = new THREE.WebGLRenderer();\r\n    this.renderer.setClearColor( 0xf0f0f0 );\r\n    dom.appendChild( this.renderer.domElement );\r\n    this.resize();\r\n\r\n  }\r\n\r\n  resize() {\r\n\r\n    this.renderer.setSize( window.innerWidth, window.innerHeight );\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    this.dispatchEvent( { type: 'onPreRender' } );\r\n    this.renderer.render( this.scene, this.camera );\r\n    window.requestAnimationFrame( this.render.bind( this ) );\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = WindowManager;\r\n","let\r\nGame = require( './game/Game.js' );\r\n\r\n(function () {\r\n\r\n  'use strict';\r\n\r\n  var game = new Game();\r\n\r\n})();\r\n","/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nfunction EventDispatcher() {}\r\n\r\nObject.assign( EventDispatcher.prototype, {\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nmodule.exports = EventDispatcher;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}